/*
一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。
答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。

示例 1：
输入：n = 2
输出：2

示例 2：
输入：n = 7
输出：21

示例 3：
输入：n = 0
输出：1

提示：
0 <= n <= 100
*/


/**
 * @param {number} n
 * @return {number}
 */
// 解法一
var numWays = function(n) {
    let res = [];
    res[0] = 1, res[1] = 1, res[2] = 2;
    for(let i = 3; i <= n; i++) {
        // 这里取余是为了处理大数越界的情况：随着 n 增大, f(n) 会超过 Int32 甚至 Int64 的取值范围，导致最终的返回值错误。
        res[i] = (res[i-1] + res[i-2]) % 1000000007;
        // 求余运算规则：设正整数 x, y, p，求余符号为 ⊙ ，则有 (x + y) ⊙ p = (x ⊙ p + y ⊙ p) ⊙ p。
        // 解析：根据以上规则，可推出 f(n) ⊙ p = [f(n-1) ⊙ p + f(n-2) ⊙ p] ⊙ p，从而可以在循环过程中每次计算 sum = a + b ⊙ 1000000007，此操作与最终返回前取余等价。
    }
    return res[n];
};
// 解法二：优化后的解法一
var numWays = function(n) {
    let a = 1, b = 1, sum = 0;
    for(let i = 0; i < n; i++) {
        sum = (a + b) % 1000000007;
        a = b;
        b = sum;
    }
    return a;
};
