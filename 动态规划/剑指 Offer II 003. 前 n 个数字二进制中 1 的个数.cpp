/*
给定一个非负整数 n ，请计算 0 到 n 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。

示例 1:
输入: n = 2
输出: [0,1,1]
解释:
0 --> 0
1 --> 1
2 --> 10

示例 2:
输入: n = 5
输出: [0,1,1,2,1,2]
解释:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101

说明 :
0 <= n <= 105

进阶:
给出时间复杂度为 O(n*sizeof(integer)) 的解答非常容易。但你可以在线性时间 O(n) 内用一趟扫描做到吗？
要求算法的空间复杂度为 O(n) 。
你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount ）来执行此操作。
*/


class Solution {
public:
    vector<int> countBits(int n) {
        vector <int> res(n + 1, 0);
        if (n == 0) return res;
        res[0] = 0;
        res[1] = 1;
        for (int i = 2; i <= n; i++) {
            // 使用dp[i]记录i中1的个数； 如果i是奇数，二进制1的个数等于dp[i-1] + 1; 如果i是偶数，相当于(i / 2)左移一位，1的个数和i/2相等
            if (i % 2) res[i] = res[i-1] + 1;
            else res[i] = res[i/2];
        }
        return res;
    }
};
