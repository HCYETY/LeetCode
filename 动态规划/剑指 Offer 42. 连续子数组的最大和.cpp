/*
输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。
求所有子数组的和的最大值。
要求时间复杂度为O(n)。

示例1:
输入: nums = [-2,1,-3,4,-1,2,1,-5,4]
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。

提示：
1 <= arr.length <= 10^5
-100 <= arr[i] <= 100
*/


class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int res = nums[0];
        for (int i = 1; i < nums.size(); i++) {
				// 负数导致最大和变小，故如果当前元素的上一个元素值为负数，便修改为 0 再相加。
				// 如果修改为 0 后再相加则意味着此时最大和需重新计算
            nums[i] += max(nums[i-1], 0);
            // 时刻更新最大和
            res = max(res, nums[i]);
        }
        return res;
    }
};
