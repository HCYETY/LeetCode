/*
你的朋友正在使用键盘输入他的名字 name。偶尔，在键入字符 c 时，按键可能会被长按，而字符可能被输入 1 次或多次。
你将会检查键盘输入的字符 typed。如果它对应的可能是你的朋友的名字（其中一些字符可能被长按），那么就返回 True。

示例 1：
输入：name = "alex", typed = "aaleex"
输出：true
解释：'alex' 中的 'a' 和 'e' 被长按。

示例 2：
输入：name = "saeed", typed = "ssaaedd"
输出：false
解释：'e' 一定需要被键入两次，但在 typed 的输出中不是这样。

示例 3：
输入：name = "leelee", typed = "lleeelee"
输出：true

示例 4：
输入：name = "laiden", typed = "laiden"
输出：true
解释：长按名字中的字符并不是必要的。

示例 5：
输入：name = "alex", typed = "aaleelx"
输出：false

示例 6：
输入：name = "alex", typed = "aaleexa"
输出：false

提示：
name.length <= 1000
typed.length <= 1000
name 和 typed 的字符都是小写字母。
*/


// 自己写的有点冗余，不过貌似效率和官解一样
class Solution {
public:
    bool isLongPressedName(string name, string typed) {
        int left = 0, right = 0, sign = name[0];
        while(left < name.size() && right < typed.size()) {
            if(typed[right] == name[left]) {
                sign = typed[right];
                left++;
                right++;
            } else if(typed[right] != name[left] && typed[right] != sign) {
                return false;
            } else if(typed[right] != name[left] && typed[right] == sign) {
                right++;
            }
        }
        while(right < typed.size()) {
            if(typed[right] == sign) {
                sign = typed[right];
                right++;
            } else {
                return false;
            }
        }
        if(left == name.size() && right == typed.size()) return true;
        return false;
    }
};
// 官解，果然优雅得多
class Solution {
public:
    bool isLongPressedName(string name, string typed) {
        int i = 0, j = 0;
        while (j < typed.length()) {
            if (i < name.length() && name[i] == typed[j]) {
                i++;
                j++;
            } else if (j > 0 && typed[j] == typed[j - 1]) {
                j++;
            } else {
                return false;
            }
        }
        return i == name.length();
    }
};
