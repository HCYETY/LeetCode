/*
给定一个偶数长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果。
你需要把这些糖果平均分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。

示例 1:
输入: candies = [1,1,2,2,3,3]
输出: 3
解析: 一共有三种种类的糖果，每一种都有两个。
     最优分配方案：妹妹获得[1,2,3],弟弟也获得[1,2,3]。这样使妹妹获得糖果的种类数最多。
     
示例 2 :
输入: candies = [1,1,2,3]
输出: 2
解析: 妹妹获得糖果[2,3],弟弟获得糖果[1,1]，妹妹有两种不同的糖果，弟弟只有一种。这样使得妹妹可以获得的糖果种类数最多。

注意:
数组的长度为[2, 10,000]，并且确定为偶数。
数组中数字的大小在范围[-100,000, 100,000]内。
*/

//用栈版
class Solution {
public:
    int distributeCandies(vector<int>& candyType) {
        sort(candyType.begin(), candyType.end());
        vector<int> ans;
        ans.push_back(candyType[0]);
        for(int i = 1; i < candyType.size(); i++) {
            if(candyType[i] != candyType[i-1]) {
                ans.push_back(candyType[i]);
            }
        }
			// 根据题意，弟弟和妹妹一人分一半的糖果，那么就算全部糖果的种类都不一样，妹妹最多也只能得到一半不一样的糖果。
        if(ans.size() >= candyType.size() / 2) {
            return candyType.size() / 2;
        } else {
            return ans.size();
        }
    }
};
//由于用栈，所以想想空间上是否可以再优化
class Solution {
public:
    int distributeCandies(vector<int>& candyType) {
        sort(candyType.begin(), candyType.end());
        int count = 1;
        for(int i = 1; i < candyType.size(); i++) {
            if(count >= candyType.size() / 2) {
                return candyType.size() / 2;
            }
            if(candyType[i] != candyType[i-1]) {
                count++;
            }
        }
        return count;
    }
};
