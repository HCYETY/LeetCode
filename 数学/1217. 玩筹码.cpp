/*
数轴上放置了一些筹码，每个筹码的位置存在数组 chips 当中。
你可以对 任何筹码 执行下面两种操作之一（不限操作次数，0 次也可以）：
- 将第 i 个筹码向左或者右移动 2 个单位，代价为 0。
- 将第 i 个筹码向左或者右移动 1 个单位，代价为 1。
最开始的时候，同一位置上也可能放着两个或者更多的筹码。

返回将所有筹码移动到同一位置（任意位置）上所需要的最小代价。

示例 1：
输入：chips = [1,2,3]
输出：1
解释：第二个筹码移动到位置三的代价是 1，第一个筹码移动到位置三的代价是 0，总代价为 1。

示例 2：
输入：chips = [2,2,2,3,3]
输出：2
解释：第四和第五个筹码移动到位置二的代价都是 1，所以最小总代价为 2。

提示：
1 <= chips.length <= 100
1 <= chips[i] <= 10^9
*/

/* 思路：
对于任何筹码有两种移动方法：
（1）将第 i 个筹码向左或向右移动 2 个单位，代价为 0，那么奇数位置移到奇数位置不需要消耗代价，偶数位置移到偶数位置不需要消耗代价。
（2）将第 i 个筹码向左或者右移动 1 个单位，代价为 1。
那么运用贪心思想，能用方法一移动，绝不用方法二。
于是将所有在奇数位置的筹码移动到位置 i（为奇数），再将所有在偶数位置的筹码移动到位置 i + 1（为偶数）。
然后比较分别两个位置上的筹码个数，将数量较小的筹码全部移动到数量较多的筹码位置上，此时所消耗的总代价最小为数量较小的筹码数。也就是说，最小代价就是min(奇数的数量，偶数的数量）
*/
class Solution {
public:
    int minCostToMoveChips(vector<int>& position) {
        int odd = 0, even = 0;
        for (int i = 0; i < position.size(); i++) {
            if ((position[i] & 1) == 1) odd++;
            else even++;
        }
        return min(odd, even);
    }
};
