/*
给定一个整数数组 asteroids，表示在同一行的小行星。
对于数组中的每一个元素，其绝对值表示小行星的大小，正负表示小行星的移动方向（正表示向右移动，负表示向左移动）。每一颗小行星以相同的速度移动。
找出碰撞后剩下的所有小行星。
碰撞规则：两个行星相互碰撞，较小的行星会爆炸。如果两颗行星大小相同，则两颗行星都会爆炸。两颗移动方向相同的行星，永远不会发生碰撞。

示例 1：
输入：asteroids = [5,10,-5]
输出：[5,10]
解释：10 和 -5 碰撞后只剩下 10 。 5 和 10 永远不会发生碰撞。

示例 2：
输入：asteroids = [8,-8]
输出：[]
解释：8 和 -8 碰撞后，两者都发生爆炸。

示例 3：
输入：asteroids = [10,2,-5]
输出：[10]
解释：2 和 -5 发生碰撞后剩下 -5 。10 和 -5 发生碰撞后剩下 10 。

示例 4：
输入：asteroids = [-2,-1,1,2]
输出：[-2,-1,1,2]
解释：-2 和 -1 向左移动，而 1 和 2 向右移动。 由于移动方向相同的行星不会发生碰撞，所以最终没有行星发生碰撞。

提示：
2 <= asteroids.length <= 104
-1000 <= asteroids[i] <= 1000
asteroids[i] != 0
*/


class Solution {
public:
    vector<int> asteroidCollision(vector<int>& asteroids) {
        stack <int> stk;
        
        // 先拿到 asteroids数组的每个元素，再根据不同情况进行不同的判断
        // 注意判断条件的整合，避免 重复（套） 判断（娃）
        for (int as : asteroids) {
            // 5.栈顶元素为正值，但绝对值小于为负值的 as，此时栈顶元素（行星）发生爆炸
            // 5.1 这时需要继续查找栈里的元素，看 as 是否会与剩余的栈顶元素发生爆炸（查找需要直到 as 爆炸为止）
            // 5.1.1 如果 as 很大，大到剩余的行星都爆炸了，那么结束循环，让 as 进栈
            // 5.1.2 如果 as 只比剩余的部分行星大，那么结束循环，as 爆炸，不用操作
            while (!stk.empty() && stk.top() > 0 && stk.top() < -as) {
                stk.pop();
            }
            // 4.栈顶元素为正数，as 为负值，且两者大小相等（两者都发生爆炸）
            if (!stk.empty() && as < 0 && stk.top() == -as) {
                stk.pop();
            }
            // 1.asteroids数组的第一个元素可进栈
            // 2.as 为正值时也可进栈
            // 3.栈顶元素为负值时，as 可进栈（因为要么行星的方向不一样，要么方向相同但速度相同，所以一定都不会发生爆炸）
            else if (as > 0 || stk.empty() || stk.top() < 0) {
                stk.push(as);
            }
        }
        
        // 由于栈顶元素先被获取，故需要倒着遍历数组，这样才能从栈底到栈顶、数组从左到右正确展示
        int len = stk.size();
        vector <int> res(len);
        while(!stk.empty()) {
            res[len-1] = stk.top();
            stk.pop();
            len--;
        }
        return res;
    }
};
